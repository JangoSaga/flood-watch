import csv
import pickle
import pandas as pd
import os

def load_model_and_data():
    """
    Load trained model and necessary data files
    """
    script_dir = os.path.dirname(__file__)
    
    # Load cities coordinates
    cities_path = os.path.join(script_dir,'data', 'cities.csv')
    cities = []
    with open(cities_path, 'r', encoding='UTF-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            try:
                city = row['city']
                lat = float(row['latitude'])
                lon = float(row['longitude'])
                cities.append([city, lat, lon])  # [city, lat, lon]
            except (KeyError, ValueError, TypeError):
                continue
    
    return cities

def get_7day_prediction_data():
    """
    Load 7-day predictions generated by enhanced_forecast.py
    """
    script_dir = os.path.dirname(__file__)
    predictions_path = os.path.join(script_dir, 'data', '7day_flood_predictions.csv')
    
    try:
        # Load 7-day predictions
        predictions_df = pd.read_csv(predictions_path)
        print(f"Loaded {len(predictions_df)} 7-day prediction records")
        print(f"Data covers {predictions_df['City'].nunique()} cities over {predictions_df['Date'].nunique()} days")
        
        # Convert to list format for processing
        plotting_data = []
        for _, row in predictions_df.iterrows():
            plotting_data.append([
                row['City'],
                row['Latitude'], 
                row['Longitude'],
                row['Date'],
                row['Weather_Precip'],
                row['Max_Reservoir_Fill'],
                row['Predicted_Flood_Risk'],
                row['Flood_Probability']
            ])
        
        return plotting_data
        
    except FileNotFoundError:
        print("ERROR: 7-day predictions file not found!")
        print("Please run enhanced_forecast.py first to generate predictions.")
        return []
    except Exception as e:
        print(f"Error loading 7-day predictions: {e}")
        return []

def create_plotting_csv(plotting_data):
    """
    Create CSV file for map visualization with 7-day data
    """
    script_dir = os.path.dirname(__file__)
    
    # Create data directory if it doesn't exist
    data_dir = os.path.join(script_dir, 'data')
    if not os.path.exists(data_dir):
        os.makedirs(data_dir)
    
    output_path = os.path.join(data_dir, 'final_plot.csv')
    
    headers = [
        'City', 'Latitude', 'Longitude', 'Date', 'Precipitation', 
        'Max_Reservoir_Fill', 'Flood_Risk', 'Flood_Probability'
    ]
    
    with open(output_path, 'w', newline='', encoding='UTF-8') as f:
        writer = csv.writer(f)
        writer.writerow(headers)
        writer.writerows(plotting_data)
    
    print(f"Created plotting data with {len(plotting_data)} city-day records")
    print(f"Saved to: {output_path}")

def generate_risk_summary(plotting_data):
    """
    Generate summary of 7-day flood risk predictions
    """
    if not plotting_data:
        print("No data to summarize")
        return
    
    df = pd.DataFrame(plotting_data, columns=[
        'City', 'Latitude', 'Longitude', 'Date', 'Precipitation', 
        'Max_Reservoir_Fill', 'Flood_Risk', 'Flood_Probability'
    ])
    
    total_predictions = len(df)
    high_risk_predictions = len(df[df['Flood_Risk'] == 1])
    unique_cities = df['City'].nunique()
    unique_days = df['Date'].nunique()
    
    print("\n" + "="*60)
    print("7-DAY FLOOD RISK ANALYSIS SUMMARY")
    print("="*60)
    print(f"Cities analyzed: {unique_cities}")
    print(f"Forecast period: {unique_days} days")
    print(f"Total city-day predictions: {total_predictions}")
    print(f"High risk predictions: {high_risk_predictions} ({high_risk_predictions/total_predictions*100:.1f}%)")
    
    # City-level risk analysis
    city_stats = df.groupby('City').agg({
        'Flood_Risk': 'sum',
        'Flood_Probability': 'mean'
    }).sort_values('Flood_Probability', ascending=False)
    
    print(f"\nTOP 10 HIGHEST RISK CITIES:")
    print("-" * 50)
    for city, stats in city_stats.head(10).iterrows():
        high_risk_days = int(stats['Flood_Risk'])
        avg_prob = stats['Flood_Probability']
        print(f"• {city:25} | Avg Risk: {avg_prob:.3f} | High-Risk Days: {high_risk_days}/7")
    
    # Daily trend analysis
    daily_stats = df.groupby('Date').agg({
        'Flood_Risk': 'sum',
        'Flood_Probability': 'mean',
        'City': 'count'
    }).rename(columns={'City': 'Total_Cities'})
    
    print(f"\nDAILY FORECAST BREAKDOWN:")
    print("-" * 50)
    for date, stats in daily_stats.iterrows():
        high_risk_cities = int(stats['Flood_Risk'])
        total_cities = int(stats['Total_Cities'])
        avg_prob = stats['Flood_Probability']
        print(f"• {date} | Risk Cities: {high_risk_cities:2}/{total_cities} | Avg Probability: {avg_prob:.3f}")
    
    # Probability distribution analysis
    critical_predictions = len(df[df['Flood_Probability'] >= 0.8])
    high_predictions = len(df[(df['Flood_Probability'] >= 0.6) & (df['Flood_Probability'] < 0.8)])
    medium_predictions = len(df[(df['Flood_Probability'] >= 0.4) & (df['Flood_Probability'] < 0.6)])
    low_predictions = len(df[df['Flood_Probability'] < 0.4])
    
    print(f"\nRISK LEVEL DISTRIBUTION:")
    print("-" * 40)
    print(f"Critical Risk (≥0.8): {critical_predictions:4} predictions ({critical_predictions/total_predictions*100:.1f}%)")
    print(f"High Risk (0.6-0.8):  {high_predictions:4} predictions ({high_predictions/total_predictions*100:.1f}%)")
    print(f"Medium Risk (0.4-0.6): {medium_predictions:4} predictions ({medium_predictions/total_predictions*100:.1f}%)")
    print(f"Low Risk (<0.4):      {low_predictions:4} predictions ({low_predictions/total_predictions*100:.1f}%)")

def create_risk_zones_data(plotting_data):
    """
    Create risk zones based on probability scores and forecast timeline
    """
    script_dir = os.path.dirname(__file__)
    data_dir = os.path.join(script_dir, 'data')
    if not os.path.exists(data_dir):
        os.makedirs(data_dir)
    
    output_path = os.path.join(data_dir, 'risk_zones.csv')
    
    risk_zones = []
    for city_data in plotting_data:
        city_name = city_data[0]
        lat = city_data[1]
        lon = city_data[2]
        date = city_data[3]
        precipitation = city_data[4]
        reservoir_fill = city_data[5]
        flood_risk = city_data[6]
        flood_probability = city_data[7]
        
        # Determine risk level based on probability score
        if flood_probability >= 0.8:
            risk_level = "Critical"
            alert_level = "RED"
        elif flood_probability >= 0.6:
            risk_level = "High"
            alert_level = "ORANGE"
        elif flood_probability >= 0.4:
            risk_level = "Medium"
            alert_level = "YELLOW"
        else:
            risk_level = "Low"
            alert_level = "GREEN"
        
        # Determine primary risk factor based on data values
        if precipitation > 50 and reservoir_fill > 80:
            risk_factor = "Weather + Reservoir"
        elif precipitation > 50:
            risk_factor = "Heavy Rainfall"
        elif reservoir_fill > 80:
            risk_factor = "High Reservoir Levels"
        elif precipitation > 20:
            risk_factor = "Moderate Rainfall"
        elif reservoir_fill > 60:
            risk_factor = "Elevated Reservoir Levels"
        else:
            risk_factor = "Normal Conditions"
        
        risk_zones.append([
            city_name, lat, lon, date, risk_level, alert_level, risk_factor, 
            round(precipitation, 1), round(reservoir_fill, 1), 
            round(flood_probability, 3), int(flood_risk)
        ])
    
    # Save risk zones data
    headers = [
        'City', 'Latitude', 'Longitude', 'Date', 'Risk_Level', 'Alert_Level', 'Primary_Risk_Factor',
        'Precipitation_mm', 'Max_Reservoir_Fill_Percent', 'Flood_Probability', 'Binary_Risk'
    ]
    
    with open(output_path, 'w', newline='', encoding='UTF-8') as f:
        writer = csv.writer(f)
        writer.writerow(headers)
        writer.writerows(risk_zones)
    
    print(f"Created 7-day risk zones data: {output_path}")

def create_daily_summary(plotting_data):
    """
    Create day-wise summary for 7-day forecast
    """
    script_dir = os.path.dirname(__file__)
    data_dir = os.path.join(script_dir, 'data')
    if not os.path.exists(data_dir):
        os.makedirs(data_dir)
        
    output_path = os.path.join(data_dir, 'daily_summary.csv')
    
    df = pd.DataFrame(plotting_data, columns=[
        'City', 'Latitude', 'Longitude', 'Date', 'Precipitation', 
        'Max_Reservoir_Fill', 'Flood_Risk', 'Flood_Probability'
    ])
    
    # Group by date and calculate daily statistics
    daily_stats = df.groupby('Date').agg({
        'Flood_Risk': 'sum',
        'Flood_Probability': ['mean', 'max', 'count'],
        'Precipitation': 'mean',
        'Max_Reservoir_Fill': 'mean'
    }).round(3)
    
    # Flatten column names
    daily_stats.columns = [
        'High_Risk_Cities', 'Avg_Flood_Probability', 'Max_Flood_Probability', 
        'Total_Cities', 'Avg_Precipitation', 'Avg_Reservoir_Fill'
    ]
    
    daily_stats.to_csv(output_path)
    print(f"Created daily summary: {output_path}")

def create_city_summary(plotting_data):
    """
    Create city-wise summary showing risk trend over 7 days
    """
    script_dir = os.path.dirname(__file__)
    data_dir = os.path.join(script_dir, 'data')
    if not os.path.exists(data_dir):
        os.makedirs(data_dir)
        
    output_path = os.path.join(data_dir, 'city_summary.csv')
    
    df = pd.DataFrame(plotting_data, columns=[
        'City', 'Latitude', 'Longitude', 'Date', 'Precipitation', 
        'Max_Reservoir_Fill', 'Flood_Risk', 'Flood_Probability'
    ])
    
    # Group by city and calculate statistics
    city_stats = df.groupby('City').agg({
        'Flood_Risk': 'sum',
        'Flood_Probability': ['mean', 'max', 'std'],
        'Precipitation': 'mean',
        'Max_Reservoir_Fill': 'mean',
        'Latitude': 'first',
        'Longitude': 'first'
    }).round(3)
    
    # Flatten column names
    city_stats.columns = [
        'Total_High_Risk_Days', 'Avg_Flood_Probability', 'Peak_Flood_Probability', 
        'Risk_Variability', 'Avg_Precipitation', 'Avg_Reservoir_Fill',
        'Latitude', 'Longitude'
    ]
    
    # Add risk category
    city_stats['Risk_Category'] = city_stats['Avg_Flood_Probability'].apply(
        lambda x: 'Critical' if x >= 0.8 else 
                 'High' if x >= 0.6 else 
                 'Medium' if x >= 0.4 else 'Low'
    )
    
    # Sort by average flood probability
    city_stats = city_stats.sort_values('Avg_Flood_Probability', ascending=False)
    
    city_stats.to_csv(output_path)
    print(f"Created city-wise summary: {output_path}")

def main():
    """
    Main function to process 7-day flood predictions from enhanced_forecast.py
    """
    print("Processing 7-day flood predictions for enhanced visualization...")
    
    # Load model and cities (for reference, though we use forecast data)
    cities = load_model_and_data()
    print(f"Loaded {len(cities)} cities for reference")
    
    # Get 7-day prediction data from enhanced_forecast.py
    plotting_data = get_7day_prediction_data()
    
    if not plotting_data:
        print("\nERROR: No 7-day prediction data available!")
        print("Please run enhanced_forecast.py first to generate the predictions.")
        print("The forecast script will create 7day_flood_predictions.csv with the required data.")
        return
    
    # Create all output files for visualization and analysis
    print("\nCreating visualization and analysis files...")
    
    # Create plotting CSV for map visualization
    create_plotting_csv(plotting_data)
    
    # Generate comprehensive risk summary
    generate_risk_summary(plotting_data)
    
    # Create risk zones with alert levels
    create_risk_zones_data(plotting_data)
    
    # Create daily and city summaries
    create_daily_summary(plotting_data)
    create_city_summary(plotting_data)
    
    print("\n" + "="*60)
    print("7-DAY FLOOD PREDICTION PROCESSING COMPLETE!")
    print("="*60)
    print("Files created for visualization and analysis:")
    print("• final_plot.csv        - Main data for map visualization")
    print("• risk_zones.csv        - Risk zones with alert levels") 
    print("• daily_summary.csv     - Day-wise forecast statistics")
    print("• city_summary.csv      - City-wise risk analysis")
    print("\nThese files can be used for:")
    print("- Interactive flood risk mapping")
    print("- Emergency response planning")
    print("- Risk trend analysis")
    print("- Alert system integration")

if __name__ == "__main__":
    main()